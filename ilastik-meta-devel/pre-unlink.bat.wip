set ILASTIK_META_PATH=%PREFIX%\ilastik-meta
cd "%ILASTIK_META_PATH%"

REM store paths to ilastik-meta and its subrepos
echo %ILASTIK_META_PATH%> _tmp_git_repos.txt
git submodule --quiet foreach --recursive "git rev-parse --show-toplevel" >> _tmp_git_repos.txt
if errorlevel 1 exit 1

REM check for uncommitted changes
call :empty_file _tmp_git_status.txt
FOR /F "delims=" %%i IN ('cat _tmp_git_repos.txt') DO (
    cd "%%i"
    git status -uno -s -z >> "%ILASTIK_META_PATH%\_tmp_git_status.txt"
)
cd "%ILASTIK_META_PATH%"
if errorlevel 1 exit 1

REM abort if there are uncommitted changes (_tmp_git_status.txt is non-empty)
for /f %%i in ("_tmp_git_status.txt") do (
    del _tmp_git_status.txt
    if not %%~zi==0 (
        echo "%ILASTIK_META_PATH%" has uncommitted changes:
        git status -uno
        git submodule foreach --recursive "git status -uno"
        echo Aborting remove.
        exit 1
    )
)

REM check if there are unpushed commits (_tmp_git_pushed.txt is empty)
REM this is not fool-proof since there may be other unpushed branches
FOR /F "delims=" %%i IN ('cat _tmp_git_repos.txt') DO (
    cd "%%i"
    git branch -r --contains HEAD > _tmp_git_pushed.txt
    if errorlevel 1 exit 1
    for /f %%j in ("_tmp_git_pushed.txt") do (
        del _tmp_git_pushed.txt
        cd "%ILASTIK_META_PATH%"
        if %%~zj==0 (
            echo HEAD of "%%i" was not pushed. Aborting remove.
            exit 1
        )
    )
)

echo removing git repository "%ILASTIK_META_PATH%"
del /F /S /Q "%ILASTIK_META_PATH%"

cd "%PREFIX%"
goto :eof

REM create an empty file
REM     call :empty_file  "filename"
:empty_file
    copy /Y NUL "%~1" > NUL
    goto :eof
